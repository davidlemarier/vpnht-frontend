// Generated by CoffeeScript 1.8.0
(function() {
  var LocalStrategy, User;

  LocalStrategy = require("passport-local").Strategy;

  User = require("../models/user");

  module.exports = function(passport) {
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findById(id, function(err, user) {
        return done(err, user);
      });
    });
    return passport.use("login", new LocalStrategy({
      usernameField: "username",
      passReqToCallback: true
    }, function(req, username, password, done) {
      return User.findOne({
        username: username
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, req.flash("error", "User not found"));
        }
        return user.comparePassword(password, function(err, isMatch) {
          var time;
          if (isMatch) {
            time = 14 * 24 * 3600000;
            req.session.cookie.maxAge = time;
            req.session.cookie.expires = new Date(Date.now() + time);
            req.session.touch();
            return done(null, user, req.flash("success", "Successfully logged in."));
          } else {
            return done(null, false, req.flash("error", "Invalid Password"));
          }
        });
      });
    }), passport.use("signup", new LocalStrategy({
      usernameField: "username",
      passReqToCallback: true
    }, function(req, username, password, done) {
      var findOrCreateUser;
      findOrCreateUser = function() {
        return User.findOne({
          username: req.body.username
        }, function(err, existingUser) {
          if (existingUser) {
            req.flash("form", {
              email: req.body.email
            });
            return done(null, false, req.flash("error", "An account with that username already exists."));
          }
          return User.findOne({
            email: req.body.email
          }, function(err, existingUser) {
            var user;
            if (existingUser) {
              req.flash("form", {
                email: req.body.email
              });
              return done(null, false, req.flash("error", "An account with that email address already exists."));
            }
            user = new User({
              email: req.body.email,
              username: req.body.username,
              password: req.body.password
            });
            return user.save(function(err) {
              var time;
              if (err) {
                return done(err, false, req.flash("error", "Error... please contact us at support@vpn.ht"));
              }
              if (req.body.coupon) {
                return user.setCoupon(req.body.coupon, function(err) {
                  var time;
                  time = 14 * 24 * 3600000;
                  req.session.cookie.maxAge = time;
                  req.session.cookie.expires = new Date(Date.now() + time);
                  req.session.touch();
                  return done(null, user, req.flash("success", "Thanks for signing up. Please select your package !"));
                });
              } else {
                time = 14 * 24 * 3600000;
                req.session.cookie.maxAge = time;
                req.session.cookie.expires = new Date(Date.now() + time);
                req.session.touch();
                return done(null, user, req.flash("success", "Thanks for signing up. Please select your package !"));
              }
            });
          });
        });
      };
      return process.nextTick(findOrCreateUser);
    })));
  };

}).call(this);
