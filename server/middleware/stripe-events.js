// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var User, knownEvents, mailgunApiTransport, moment, nodemailer, restify, secrets;

  User = require("../models/user");

  secrets = require("../config/secrets");

  restify = require("restify");

  nodemailer = require("nodemailer");

  mailgunApiTransport = require("nodemailer-mailgunapi-transport");

  moment = require("moment");

  knownEvents = {
    "invoice.payment_succeeded": function(req, res, next) {
      console.log(req.stripeEvent.type + ": event processed");
      if (req.stripeEvent.data && req.stripeEvent.data.object && req.stripeEvent.data.object.customer) {
        return User.findOne({
          "stripe.customerId": req.stripeEvent.data.object.customer
        }, function(err, user) {
          var client, expiration, t;
          if (err) {
            return next(err);
          }
          if (!user) {
            return res.status(200).end();
          } else {
            t = moment(new Date(req.stripeEvent.data.object.lines.data[0].period.end * 1000));
            expiration = t.format("DD MMM YYYY HH:mm:ss");
            client = restify.createStringClient({
              url: secrets.vpnht.url
            });
            client.basicAuth(secrets.vpnht.key, secrets.vpnht.secret);
            return client.put("/activate/" + user.username, {
              expiration: expiration
            }, function(err, req2, res2, obj) {
              var mailOptions, transporter;
              if (err) {
                return next(err);
              }
              transporter = nodemailer.createTransport(mailgunApiTransport({
                apiKey: secrets.mailgun.password,
                domain: secrets.mailgun.user
              }));
              mailOptions = {
                to: user.email,
                from: "noreply@vpn.ht",
                subject: "VPN Account enabled",
                text: "You are receiving this email because your account has been activated till " + expiration + ".\n\n" + "You can read the documentation how to get started on:\n\n" + "https://vpn.ht/documentation\n\n" + "If you need help, feel free to contact us at support@vpn.ht.\n"
              };
              return transporter.sendMail(mailOptions, function(err) {
                if (err) {
                  return next(err);
                }
                console.log("user: " + user.username + " subscription was successfully updated and expire on " + expiration);
                return res.status(200).end();
              });
            });
          }
        });
      } else {
        return next(new Error("stripeEvent.data.object.customer is undefined"));
      }
    },
    "customer.subscription.deleted": function(req, res, next) {
      console.log(req.stripeEvent.type + ": event processed");
      if (req.stripeEvent.data && req.stripeEvent.data.object && req.stripeEvent.data.object.customer) {
        return User.findOne({
          "stripe.customerId": req.stripeEvent.data.object.customer
        }, function(err, user) {
          if (err) {
            return next(err);
          }
          if (!user) {
            return res.status(200).end();
          } else {
            user.stripe.last4 = "";
            user.stripe.plan = "free";
            user.stripe.subscriptionId = "";
            return user.save(function(err) {
              if (err) {
                return next(err);
              }
              console.log("user: " + user.email + " subscription was successfully cancelled.");
              return res.status(200).end();
            });
          }
        });
      } else {
        return next(new Error("stripeEvent.data.object.customer is undefined"));
      }
    }
  };

  module.exports = function(req, res, next) {
    if (req.stripeEvent && req.stripeEvent.type && knownEvents[req.stripeEvent.type]) {
      knownEvents[req.stripeEvent.type](req, res, next);
    } else {
      next(new Error("Stripe Event not found"));
    }
  };

}).call(this);
