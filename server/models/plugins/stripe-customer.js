// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Stripe, exports, stripe, stripeCustomer;

  Stripe = require("stripe");

  stripe = void 0;

  module.exports = exports = stripeCustomer = function(schema, options) {
    stripe = Stripe(options.apiKey);
    schema.add({
      stripe: {
        customerId: String,
        subscriptionId: String,
        last4: String,
        plan: {
          type: String,
          "default": options.defaultPlan
        }
      }
    });
    schema.pre("save", function(next) {
      var user;
      user = this;
      if (!user.isNew || user.stripe.customerId) {
        return next();
      }
      return user.createCustomer(function(err) {
        if (err) {
          return next(err);
        }
        return next();
      });
    });
    schema.statics.getPlans = function() {
      return options.planData;
    };
    schema.methods.createCustomer = function(cb) {
      var user;
      user = this;
      return stripe.customers.create({
        email: user.email
      }, function(err, customer) {
        if (err) {
          return cb(err);
        }
        user.stripe.customerId = customer.id;
        return user.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      });
    };
    schema.methods.setCard = function(stripe_token, cb) {
      var cardHandler, user;
      user = this;
      cardHandler = function(err, customer) {
        var card;
        if (err) {
          return cb(err);
        }
        if (!user.stripe.customerId) {
          user.stripe.customerId = customer.id;
        }
        card = customer.cards.data[0];
        user.stripe.last4 = card.last4;
        return user.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      };
      if (user.stripe.customerId) {
        return stripe.customers.update(user.stripe.customerId, {
          card: stripe_token
        }, cardHandler);
      } else {
        return stripe.customers.create({
          email: user.email,
          card: stripe_token
        }, cardHandler);
      }
    };
    schema.methods.setPlan = function(plan, stripe_token, cb) {
      var createSubscription, customerData, subscriptionHandler, user;
      user = this;
      customerData = {
        plan: plan
      };
      subscriptionHandler = function(err, subscription) {
        if (err) {
          return cb(err);
        }
        user.stripe.plan = plan;
        user.stripe.subscriptionId = subscription.id;
        return user.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      };
      createSubscription = function() {
        return stripe.customers.createSubscription(user.stripe.customerId, {
          plan: plan
        }, subscriptionHandler);
      };
      if (stripe_token) {
        return user.setCard(stripe_token, function(err) {
          if (err) {
            return cb(err);
          }
          return createSubscription();
        });
      } else {
        if (user.stripe.subscriptionId) {
          return stripe.customers.updateSubscription(user.stripe.customerId, user.stripe.subscriptionId, {
            plan: plan
          }, subscriptionHandler);
        } else {
          return createSubscription();
        }
      }
    };
    schema.methods.updateStripeEmail = function(cb) {
      var user;
      user = this;
      if (!user.stripe.customerId) {
        return cb;
      }
      return stripe.customers.update(user.stripe.customerId, {
        email: user.email
      }, function(err, customer) {
        return cb(err);
      });
    };
    schema.methods.setCoupon = function(coupon, cb) {
      var user;
      user = this;
      if (!user.stripe.customerId) {
        return cb;
      }
      return stripe.customers.update(user.stripe.customerId, {
        coupon: coupon
      }, function(err, customer) {
        if (err) {
          return delete user.coupon;
        } else {
          user.coupon = coupon;
          return user.save(function(err2) {
            if (err) {
              return cb(err);
            }
            if (err2) {
              return cb(err2);
            }
            return cb(null);
          });
        }
      });
    };
    return schema.methods.cancelStripe = function(cb) {
      var user;
      user = this;
      if (user.stripe.customerId) {
        return stripe.customers.del(user.stripe.customerId).then((function(confirmation) {
          return cb;
        }), function(err) {
          return cb(err);
        });
      } else {
        return cb;
      }
    };
  };

}).call(this);
